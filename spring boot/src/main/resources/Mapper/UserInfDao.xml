<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.test.demo.dao.UserInfDao">
    <resultMap id="userMap" type="com.test.demo.entity.UserInf">
        <id column="user_id" property="userId"/>
        <result column="login_name" property="loginName"/>
        <result column="password" property="password"/>
        <result column="status" property="status"/>
        <result column="create_date" property="createDate"/>
        <result column="user_name" property="userName"/>
        <result column="face_url" property="faceUrl"/>
        <result column="face_path" property="facePath"/>
        <collection property="sysRole" ofType="com.test.demo.entity.SysRole">
            <result column="role_name" property="roleName"/>
        </collection>
    </resultMap>
    <select id="findByUserName" parameterType="String" resultMap="userMap">
        select
        u.*, r.role_name
        from
        user_inf u left join sys_role_user sru on u.user_id = sru.user_id
        left join sys_role r on sru.role_id = r.role_id
        where user_name = #{userName}
    </select>
    <select id="getUserList" resultType="com.test.demo.entity.UserInf">
        select
        user_id,
        login_name,
        password,
        status,
        create_date,
        user_name,
        face_url,
        face_path
        from
        user_inf
    </select>
    <select id="queryUserInfPage" resultType="com.test.demo.entity.UserInf">
        select
        user_id,
        login_name,
        password,
        status,
        create_date,
        user_name,
        face_url,
        face_path
        from
        user_inf
        order by
        user_id asc
        LIMIT #{rowIndex},#{pageSize};
    </select>
    <select id="queryUserInfCount" resultType="int">
        select
        count(1)
        from
        user_inf
    </select>
    <select id="queryUserInfList" resultType="com.test.demo.entity.UserInf">
        SELECT
        user_id,
        login_name,
        password,
        status,
        create_date,
        user_name,
        face_url,
        face_path
        FROM
        user_inf
        <where>
            <if test="userInfCondition.userName != null">
                and user_name like '%${userInfCondition.userName}%'
            </if>
            <if test="userInfCondition.status !=null">
                and status = #{userInfCondition.status}
            </if>
        </where>
        order by
        user_id asc
        LIMIT #{rowIndex},#{pageSize};
    </select>
    <select id="queryUserInfConditionCount" resultType="int">
        SELECT
        count(1)
        FROM
        user_inf
        <where>
            <if test="userInfCondition.userName != null">
                and user_name like '%${userInfCondition.userName}%'
            </if>
            <if test="userInfCondition.status !=null">
                and status = #{userInfCondition.status}
            </if>
        </where>
    </select>
    <insert id="insertUserInf" parameterType="com.test.demo.entity.UserInf"
            useGeneratedKeys="true" keyProperty="userId" keyColumn="user_id">
        insert
        into
        user_inf(user_id,
        login_name,
        password,
        status,
        create_date,
        user_name,
        face_url,
        face_path)
        values
        (#{userId},#{loginName},#{password},#{status},#{createDate},#{userName},#{faceUrl},#{facePath})
    </insert>
    <update id="updateUserInf" parameterType="com.test.demo.entity.UserInf">
        update user_inf
        <set>
            <if test="loginName != null">
                login_name = #{loginName},
            </if>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="userName != null">
                user_name = #{userName},
            </if>
        </set>
        where user_id = #{userId}
    </update>
    <delete id="deleteUserInf" parameterType="Long">
        delete from user_inf
        where
        user_id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
</mapper>